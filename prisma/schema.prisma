// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  handle        String    @unique @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://zjbjwmzfbmoykisvhhie.supabase.co/storage/v1/object/public/surgeapp/Assets/default-user-image.jpg")
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Post[]    @relation("UserLikes")

  //relations for cross table refs
  PostsLikesRelation Post[] @relation("PostLikes")
}

model Post {
  id        String   @id @unique @default(cuid())
  caption   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  userId    String
  imageURLs String[]

  user  User   @relation(fields: [userId], references: [id])
  likes User[] @relation("PostLikes")

  //relations for cross table refs
  UserLikesRelation User[] @relation("UserLikes")
}
